generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Audio {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  base64    String
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @db.ObjectId
  createdAt DateTime  @default(now())
  replies   Reply[]   @relation("AudioReplies") 

  @@index([userId])
}

model Reply {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  base64    String
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @db.ObjectId
  audio     Audio     @relation(fields: [audioId], references: [id], name: "AudioReplies") 
  audioId   String    @db.ObjectId 
  createdAt DateTime  @default(now())

  @@index([userId])
  @@index([audioId]) 
}

model Account {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  userId            String    @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  audios        Audio[]
  replies       Reply[]
  accounts      Account[]
  sessions      Session[]
}